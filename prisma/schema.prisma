datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedsql"]
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique @db.VarChar(255)
  password String
  profile  Profile?
}

model Profile {
  id            Int                       @id @default(autoincrement())
  username      String                    @unique @db.VarChar(255)
  firstName     String                    @db.VarChar(255)
  lastName      String                    @db.VarChar(255)
  avatarUrl     String?
  bio           String?
  country       String                    @db.VarChar(255)
  websiteUrl    String?
  gender        Gender
  userId        Int                       @unique
  user          User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  follows       Profile[]                 @relation(name: "FollowedToFollower")
  followers     Profile[]                 @relation(name: "FollowedToFollower")
  posts         Post[]
  comments      Comment[]
  likedPosts    Post[]                    @relation("PostLike")
  likedComments Comment[]                 @relation("CommentLike")
  notifications NotificationsOnProfiles[]
  messages      Message[]
  contacts      Contact[]                 @relation("contact")
  contactedBy   Contact[]                 @relation("contactedBy")
}

model Contact {
  id          Int     @id @default(autoincrement())
  profileId   Int
  contactedId Int
  chatId      Int
  profile     Profile @relation(name: "contact", fields: [profileId], references: [id], onDelete: Cascade)
  contacted   Profile @relation(name: "contactedBy", fields: [contactedId], references: [id], onDelete: Cascade)
  chat        Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Chat {
  id       Int       @id @default(autoincrement())
  contacts Contact[]
  messages Message[]
}

model Message {
  id       Int      @id @default(autoincrement())
  content  String
  sendDate DateTime
  sender   Profile  @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId Int
  chatId   Int
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Notification {
  id     Int                       @id @default(autoincrement())
  type   NotificationType
  title  String                    @db.VarChar(255)
  url    String?
  sentTo NotificationsOnProfiles[]
}

model Post {
  id          Int       @id @default(autoincrement())
  content     String
  publishDate DateTime
  authorId    Int
  author      Profile   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likers      Profile[] @relation("PostLike")
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  publishDate DateTime
  authorId    Int
  postId      Int
  author      Profile   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  likers      Profile[] @relation("CommentLike")
}

model NotificationsOnProfiles {
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  profile        Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  notificationId Int
  profileId      Int
  seen           Boolean      @default(false)

  @@id([notificationId, profileId])
}

enum Gender {
  MALE
  FEMALE
}

enum NotificationType {
  ACTIVITY
  POST
  ALERT
}
